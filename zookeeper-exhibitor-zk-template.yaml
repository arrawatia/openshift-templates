kind: Template
apiVersion: v1
metadata:
  name: zookeeper-exhibitor-zk
  annotations:
    description: 'Zookeeper cluster using Exhibitor which coordinates using a bootstrap ZooKeeper cluster'
    iconClass: icon-database
    tags: 'instant-app,database,zookeeper'
objects:
    #---------------------------------------------------------------------------------
    - kind: Service
      apiVersion: v1
      metadata:
        name: 'svc-exhibitor-${INSTANCE_NAME}'
        labels:
          name: '${INSTANCE_NAME}'
          component: zookeeper
      spec:
        ports:
          - name: exhibitor
            protocol: TCP
            port: 8181
            targetPort: 8181
        selector:
          name: '${INSTANCE_NAME}'
          component: zookeeper
    #---------------------------------------------------------------------------------
    - kind: Route
      apiVersion: v1
      metadata:
        name: '${INSTANCE_NAME}'
        annotations:
          description: "Route for ${INSTANCE_NAME} Exhibitor HTTP API"
        labels:
          name: '${INSTANCE_NAME}'
          component: zookeeper
      spec:
        host: '${APPLICATION_DOMAIN}'
        to:
          kind: Service
          name: 'svc-exhibitor-${INSTANCE_NAME}'

  #---------------------------------------------------------------------------------
    - kind: DeploymentConfig
      apiVersion: v1
      metadata:
        name: 'dc-${INSTANCE_NAME}'
        labels:
          name: '${INSTANCE_NAME}'
          component: zookeeper
      spec:
        strategy:
          type: Recreate
        triggers:
          - type: ConfigChange
        replicas: 1
        selector:
          name: '${INSTANCE_NAME}'
          component: zookeeper
        template:
          metadata:
            labels:
              name: '${INSTANCE_NAME}'
              component: zookeeper
          spec:
            serviceAccount: quantezza
            containers:
              - name: zk-exhibitor
                image: gcr.io/quantiply-edge-cloud/zk-exhibitor-3.4.6:v1
                securityContext:
                  runAsUser: 0
                ports:
                  - name: client
                    containerPort: 2181
                  - name: followers
                    containerPort: 2888
                  - name: election
                    containerPort: 3888
                  - name: exhibitor
                    containerPort: 8181
                env:
                  - name: KUBERNETES_TRUST_CERT
                    value: "true"
                  - name: KUBERNETES_CA_CERTIFICATE_FILE
                    value: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                  - name: CONFIG_TYPE
                    value: ZK
                  - name: KUBERNETES_NAMESPACE
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.namespace
                  - name: ZKCFG_ZPATH
                    value: '/$(KUBERNETES_NAMESPACE)/exhibitor/${INSTANCE_NAME}'
                  - name: ZKCFG_CONNECT
                    value: "zookeeper-1.${BOOTSTRAP_ZK_NAMESPACE}.svc.cluster.local:2181,zookeeper-2.${BOOTSTRAP_ZK_NAMESPACE}.svc.cluster.local:2181,zookeeper-3.${BOOTSTRAP_ZK_NAMESPACE}.svc.cluster.local:2181"
                  - name: CONFIG_CHECK_MS
                    value: "10000"
                imagePullPolicy: Always
            restartPolicy: Always
            dnsPolicy: ClusterFirst
    
parameters:
  - name: INSTANCE_NAME
    description: Application instance name
    required: true
  - name: BOOTSTRAP_ZK_NAMESPACE
    description: Namespace that bootstrap ZK cluster is running in
    value: default
  - name: APPLICATION_DOMAIN
    description: "The exposed hostname that will route to the ZK cluster, if left blank a value will be defaulted."
    value: ""
labels:
  template: zookeeper-exhibitor-zk
