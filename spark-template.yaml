kind: Template
apiVersion: v1
metadata:
  name: spark
  creationTimestamp: null
  annotations:
    description: 'Spark cluster.'
labels:
  template: spark

parameters:
  - name: INSTANCE_NAME
    description: Instance name
    generate: expression
    from: '[a-zA-Z0-9]{5}'
    required: true
  - name: APPLICATION_DOMAIN
    description: Host name
    value: ''


#---------------------------------------------------------------------------------

objects:

# WEB CONSOLE
#---------------------------------------------------------------------------------
  - kind: Route
    apiVersion: v1
    metadata:
      name: '${INSTANCE_NAME}-spark-master'
      labels:
        component: spark
      annotations:
        description: "Route for application's http service"
    spec:
      host: '${APPLICATION_DOMAIN}'
      to:
        kind: Service
        name: '${INSTANCE_NAME}-spark-master-ui'

  - kind: Service
    apiVersion: v1
    metadata:
      name: '${INSTANCE_NAME}-spark-master-ui'
      labels:
        component: spark
        name: '${INSTANCE_NAME}-spark-master-ui'
    spec:
      ports:
        - port: 8080
          targetPort: 8080
      selector:
        name: '${INSTANCE_NAME}-spark-master'


# MASTER
#---------------------------------------------------------------------------------
  - kind: Service
    apiVersion: v1
    metadata:
      name: '${INSTANCE_NAME}-spark-master'
      labels:
        component: spark
        name: '${INSTANCE_NAME}-spark-master'
    spec:
      ports:
        - port: 7077
          targetPort: 7077
      selector:
        name: '${INSTANCE_NAME}-spark-master'


  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: '${INSTANCE_NAME}-spark-master'
      labels:
        name: '${INSTANCE_NAME}-spark-master'
        component: spark
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
      replicas: 1
      selector:
        name: '${INSTANCE_NAME}-spark-master'
        component: spark
      template:
        metadata:
          name: '${INSTANCE_NAME}-spark-master'
          labels:
            name: '${INSTANCE_NAME}-spark-master'
            component: spark
        spec:
          serviceAccount: quantezza
          containers:
            - name: '${INSTANCE_NAME}-spark-master'
              securityContext:
                runAsUser: 0
              image: quantezza/spark-master
              ports:
                - containerPort: 7077
                - containerPort: 8080
              env:
                - name: INSTANCE_ID
                  value: '${INSTANCE_NAME}'
              imagePullPolicy: Always

          restartPolicy: Always
          dnsPolicy: ClusterFirst


# DRIVER
#---------------------------------------------------------------------------------

  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: '${INSTANCE_NAME}-spark-driver'
      labels:
        name: '${INSTANCE_NAME}-spark-driver'
        component: spark
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
      replicas: 1
      selector:
        name: '${INSTANCE_NAME}-spark-driver'
        component: spark
      template:
        metadata:
          labels:
            name: '${INSTANCE_NAME}-spark-driver'
            component: spark
        spec:
          serviceAccount: quantezza
          containers:
            - name: spark-driver
              securityContext:
                runAsUser: 0
              image: quantezza/spark-driver
              env:
                - name: SPARK_MASTER_SERVICE_HOST
                  value: '${INSTANCE_NAME}-spark-master'
                - name: SPARK_MASTER_SERVICE_PORT
                  value: '7077'
                - name: INSTANCE_ID
                  value: '${INSTANCE_NAME}'
              imagePullPolicy: Always
          restartPolicy: Always
          dnsPolicy: ClusterFirst

# WORKERS
#---------------------------------------------------------------------------------
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: '${INSTANCE_NAME}-spark-worker'
      labels:
        name: '${INSTANCE_NAME}-spark-worker'
        component: spark
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
      replicas: 1
      selector:
        name: '${INSTANCE_NAME}-spark-worker'
        component: spark
      template:
        metadata:
          labels:
            name: '${INSTANCE_NAME}-spark-worker'
            component: spark
        spec:
          serviceAccount: quantezza
          containers:
            - name: spark-worker
              securityContext:
                runAsUser: 0
              image: quantezza/spark-worker
              ports:
                - containerPort: 8888
              env:
                - name: SPARK_MASTER_SERVICE_HOST
                  value: '${INSTANCE_NAME}-spark-master'
                - name: SPARK_MASTER_SERVICE_PORT
                  value: '7077'
                - name: INSTANCE_ID
                  value: '${INSTANCE_NAME}'
              imagePullPolicy: Always
          restartPolicy: Always
          dnsPolicy: ClusterFirst
