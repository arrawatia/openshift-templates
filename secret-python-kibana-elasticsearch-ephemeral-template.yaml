kind: Template
apiVersion: v1
metadata:
  name: secret-python-kibana-elasticsearch-ephemeral-template
  creationTimestamp: null
  annotations:
    description: 'Python STI with Kibana and Elasticsearch database service, without persistent storage. WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing'
    iconClass: icon-python
    tags: 'database,elasticsearch,kibana,python'


objects:

# PYTHON     ===================================================================
#---------------------------------------------------------------------------------
  - kind: Route
    apiVersion: v1
    metadata:
      name: '${APP_NAME}'
      labels:
        name: '${APP_NAME}'
    spec:
      host: '${APPLICATION_DOMAIN}'
      to:
        kind: Service
        name: 'svc-${APP_NAME}-python'

#---------------------------------------------------------------------------------
  - kind: Service
    apiVersion: v1
    metadata:
      name: 'svc-${APP_NAME}-python'
      annotations:
        description: Exposes and load balances the application pods
      labels:
        name: '${APP_NAME}'
    spec:
      ports:
        - name: web
          port: 80
          targetPort: 8080
      selector:
        name: '${APP_NAME}'
        role: app


#---------------------------------------------------------------------------------
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: '${APP_NAME}'
      annotations:
        description: Keeps track of changes in the application image

#---------------------------------------------------------------------------------
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: '${APP_NAME}-python'
      annotations:
        description: Defines how to build the application
    spec:
      source:
        type: Git
        git:
          uri: '${SOURCE_REPOSITORY_URL}'
          ref: '${SOURCE_REPOSITORY_REF}'
        contextDir: '${CONTEXT_DIR}'
      strategy:
        type: Source
        sourceStrategy:
          from:
            kind: ImageStreamTag
            namespace: openshift
            name: 'python:3.3'
      output:
        to:
          kind: ImageStreamTag
          name: '${APP_NAME}:latest'
      triggers:
        - type: ImageChange
        - type: GitHub
          github:
            secret: '${GITHUB_WEBHOOK_SECRET}'

#---------------------------------------------------------------------------------
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: 'dc-${APP_NAME}-python'
      annotations:
        description: Defines how to deploy the application server
      labels:
        name: '${APP_NAME}'
    spec:
      strategy:
        type: Rolling
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - '${APP_NAME}'
            from:
              kind: ImageStreamTag
              name: '${APP_NAME}:latest'
        - type: ConfigChange
      replicas: 1
      selector:
        name: '${APP_NAME}'
        role: app
      template:
        metadata:
          name: 'app-${APP_NAME}-python'
          labels:
            name: '${APP_NAME}'
            role: app
        spec:
          containers:
            - name: '${APP_NAME}'
              image: '${APP_NAME}'
              ports:
                - containerPort: 8080
              volumeMounts:
                # name must match the volume name below
                - name: secret-volume
                  mountPath: /etc/secret-volume
                  readOnly: true
              env:
                - name: APP_NAME
                  value: '${APP_NAME}'
                - name: ES_URL
                  value: "http://svc-${APP_NAME}-es.elk-test.svc.cluster.local:9200"
                - name: KIBANA_URL
                  value: "http://svc-${APP_NAME}-kibana.elk-test.svc.cluster.local"
          volumes:
            - name: secret-volume
              secret:
                secretName: app-secret
# ELASTICSEARCH===================================================================
#---------------------------------------------------------------------------------
  - kind: Service
    apiVersion: v1
    metadata:
      name: 'svc-${APP_NAME}-es'
      creationTimestamp: null
      labels:
        name: '${APP_NAME}'
    spec:
      ports:
        - name: es-http
          protocol: TCP
          port: 9200
          targetPort: 9200
          nodePort: 0
        - name: es-transport
          protocol: TCP
          port: 9300
          targetPort: 9300
          nodePort: 0
      selector:
        name: '${APP_NAME}'
        role: elasticsearch
      portalIP: ''
      type: ClusterIP
      sessionAffinity: None
    status:
      loadBalancer: {}

#---------------------------------------------------------------------------------
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: 'dc-${APP_NAME}-elasticsearch'
      creationTimestamp: null
      labels:
        name: '${APP_NAME}'
    spec:
      strategy:
        type: Recreate
        resources: {}
      triggers:
        - type: ConfigChange
      replicas: 1
      selector:
        name: '${APP_NAME}'
        role: elasticsearch
      template:
        metadata:
          creationTimestamp: null
          labels:
            name: '${APP_NAME}'
            role: elasticsearch
        spec:
          serviceAccount: elasticsearch
          containers:
            - name: elasticsearch
              image: quay.io/pires/docker-elasticsearch-kubernetes:1.7.2
              securityContext:
                runAsUser: 0
              ports:
                - name: "http"
                  containerPort: 9200
                  protocol: TCP
                - name: "transport"
                  containerPort: 9300
                  protocol: TCP
              env:
                - name: "KUBERNETES_TRUST_CERT"
                  value: "true"
                - name: KUBERNETES_CA_CERTIFICATE_FILE
                  value: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                - name: "DISCOVERY_SERVICE"
                  value: 'svc-${APP_NAME}-es'
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
              resources: {}
              volumeMounts:
                - name: '${APP_NAME}-data'
                  mountPath: /data
              terminationMessagePath: /dev/termination-log
              imagePullPolicy: IfNotPresent
              capabilities: {}
              securityContext:
                capabilities: {}
                privileged: false
          volumes:
            - name: '${APP_NAME}-data'
              emptyDir:
                medium: ''
          restartPolicy: Always
          dnsPolicy: ClusterFirst

# KIBANA       ===================================================================
#---------------------------------------------------------------------------------
  - kind: Route
    apiVersion: v1
    metadata:
      name: 'route-${APP_NAME}-kibana'
      annotations:
        description: "Route for ${APP_NAME} kibana service"
      labels:
        name: '${APP_NAME}'
    spec:
      host: '${APPLICATION_DOMAIN}'
      to:
        kind: Service
        name: 'svc-${APP_NAME}-kibana'

#---------------------------------------------------------------------------------
  - kind: Service
    apiVersion: v1
    metadata:
      name: 'svc-${APP_NAME}-kibana'
      creationTimestamp: null
      labels:
        name: '${APP_NAME}'
    spec:
      ports:
        - name: http
          protocol: TCP
          port: 80
          targetPort: 5601
          nodePort: 0
      selector:
        name: '${APP_NAME}'
        role: kibana
      portalIP: ''
      type: ClusterIP
      sessionAffinity: None
    status:
      loadBalancer: {}

#---------------------------------------------------------------------------------
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: 'dc-${APP_NAME}-kibana'
      creationTimestamp: null
      labels:
        name: '${APP_NAME}'
    spec:
      strategy:
        type: Recreate
        resources: {}
      triggers:
        - type: ConfigChange
      replicas: 1
      selector:
        name: '${APP_NAME}'
        role: kibana
      template:
        metadata:
          creationTimestamp: null
          labels:
            name: '${APP_NAME}'
            role: kibana
        spec:
          serviceAccount: elasticsearch
          containers:
            - name: kibana
              image: fabric8/kibana4:4.1.0
              ports:
                - containerPort: 5601
                  name: http
                  protocol: TCP
              env:
                - name: ELASTICSEARCH_URL
                  value: "http://svc-${APP_NAME}-es.elk-test.svc.cluster.local:9200"
                - name: KUBERNETES_TRUST_CERT
                  value: "true"
              resources: {}
              terminationMessagePath: /dev/termination-log
              imagePullPolicy: IfNotPresent
              capabilities: {}
              securityContext:
                runAsUser: 0
                capabilities: {}
                privileged: false
          restartPolicy: Always
          dnsPolicy: ClusterFirst
    status: {}

#---------------------------------------------------------------------------------
parameters:
  - name: APP_NAME
    description: App name
    generate: expression
    from: '[a-zA-Z0-9]{40}'
    required: true
  - name: APPLICATION_DOMAIN
    description: Host name
    value: ''
  - name: SOURCE_REPOSITORY_URL
    description: The URL of the repository with your application source code
    value: 'https://github.com/openshift/django-ex.git'
  - name: SOURCE_REPOSITORY_REF
    description: 'Set this to a branch name, tag or other ref of your repository if you are not using the default branch'
  - name: CONTEXT_DIR
    description: Set this to the relative path to your project if it is not in the root of your repository
  - name: GITHUB_WEBHOOK_SECRET
    description: A secret string used to configure the GitHub webhook
    generate: expression
    from: '[a-zA-Z0-9]{40}'

#---------------------------------------------------------------------------------
labels:
  template: python-kibana-elasticsearch-ephemeral-template
